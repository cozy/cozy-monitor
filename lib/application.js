// Generated by CoffeeScript 1.10.0
var axon, client, colors, dsClient, find, fs, getToken, helpers, homeClient, install, log, makeError, manifestBase, msgHomeNotStarted, msgInstallFailed, msgLongInstall, msgRepoGit, path, proxyClient, putInDatabase, randomString, recoverManifest, recoverStandaloneManifest, removeApp, request, spawn, start, stop, stopStandalone, uninstall, waitInstallComplete;

fs = require("fs");

axon = require('axon');

spawn = require('child_process').spawn;

path = require('path');

log = require('printit')();

request = require("request-json-light");

colors = require("colors");

find = require('lodash.find');

helpers = require('./helpers');

homeClient = helpers.clients.home;

proxyClient = helpers.clients.proxy;

dsClient = helpers.clients.ds;

client = helpers.clients.controller;

makeError = helpers.makeError;

getToken = helpers.getToken;

manifestBase = function() {
  return {
    "domain": "localhost",
    "repository": {
      "type": "git"
    },
    "scripts": {
      "start": "build/server.js"
    }
  };
};

randomString = function(length) {
  var string;
  string = "";
  while (string.length < length) {
    string = string + Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

waitInstallComplete = function(slug, timeout, callback) {
  var appNotListedErrMsg, appNotStartedErrMsg, noAppListErrMsg, socket, timeoutId;
  axon = require('axon');
  socket = axon.socket('sub-emitter');
  socket.connect(9105);
  noAppListErrMsg = "No application listed after installation.";
  appNotStartedErrMsg = "Application is not running after installation.";
  appNotListedErrMsg = "Expected application not listed in database after installation.";
  if (timeout == null) {
    timeout = 240000;
  }
  if (timeout !== 'false') {
    timeoutId = setTimeout(function() {
      socket.close();
      return homeClient.get("api/applications/", function(err, res, apps) {
        var app, i, isApp, len, ref, statusClient;
        if ((apps != null ? apps.rows : void 0) == null) {
          return callback(new Error(noAppListErrMsg));
        } else {
          isApp = false;
          ref = apps.rows;
          for (i = 0, len = ref.length; i < len; i++) {
            app = ref[i];
            if (app.slug === slug && app.state === 'installed' && app.port) {
              isApp = true;
              statusClient = request.newClient(void 0);
              statusClient.host = "http://localhost:" + app.port + "/";
              statusClient.get("", function(err, res) {
                var ref1;
                if ((ref1 = res != null ? res.statusCode : void 0) === 200 || ref1 === 403) {
                  return callback(null, {
                    state: 'installed'
                  });
                } else {
                  return callback(new Error(appNotStartedErrMsg));
                }
              });
            }
          }
          if (!isApp) {
            return callback(new Error(appNotListedErrMsg));
          }
        }
      });
    }, timeout);
  }
  return socket.on('application.update', function(id) {
    var token;
    if (token = getToken()) {
      dsClient.setBasicAuth('home', token);
    }
    return dsClient.get("data/" + id + "/", function(err, response, body) {
      if (response.statusCode === 401) {
        dsClient.setBasicAuth('home', '');
        return dsClient.get("data/" + id + "/", function(err, response, body) {
          if (callback != null) {
            callback(err, body);
          }
          return callback = null;
        });
      } else if (body.state === 'installed') {
        if (callback != null) {
          callback(err, body);
        }
        callback = null;
        clearTimeout(timeoutId);
        return socket.close();
      }
    });
  });
};

msgHomeNotStarted = function(app) {
  return "Install home failed for " + app + ". The Cozy Home looks not started.\nInstall operation cannot be performed.";
};

msgRepoGit = function(app, manifest) {
  return "Install home failed for " + app + ".\nDefault git repo " + manifest.git + " doesn't exist.\nYou can use option -r to use a specific repo.";
};

msgLongInstall = function(app) {
  return app + " installation is still running. You should check for\nits status later. If the installation is too long, you should try\nto stop it by uninstalling the application and running the\ninstallation again.";
};

msgInstallFailed = function(app) {
  return "Install home failed. Can't figure out the app state.";
};

module.exports.getApps = function(callback) {
  return homeClient.get("api/applications/", function(error, res, apps) {
    if ((apps != null) && (apps.rows != null)) {
      apps.rows.sort(function(a, b) {
        if (a.name < b.name) {
          return -1;
        } else {
          return 1;
        }
      });
      return callback(null, apps.rows);
    } else {
      return helpers.clients['couch'].get('', function(err, res, body) {
        if (err || (res == null) || res.statusCode !== 200) {
          log.error("CouchDB looks not started");
        }
        return helpers.clients['ds'].get('', function(err, res, body) {
          if ((res == null) || res.statusCode !== 200) {
            log.error("The Cozy Data System looks not started");
          }
          return helpers.clients['home'].get('', function(err, res, body) {
            if ((res == null) || res.statusCode !== 200) {
              log.error("The Cozy Home looks not started");
            }
            return callback(makeError(error, apps));
          });
        });
      });
    }
  });
};

recoverManifest = function(app, options, callback) {
  var manifest;
  manifest = manifestBase();
  manifest.name = app;
  manifest.user = app;
  if (options.displayName != null) {
    manifest.displayName = options.displayName;
  } else {
    manifest.displayName = app;
  }
  manifest.git = "https://github.com/cozy/cozy-" + app + ".git";
  return homeClient.get('api/applications/market', function(err, res, market) {
    var marketManifest, repo;
    marketManifest = find(market, function(appli) {
      return appli.name === app;
    });
    if (!(options.branch || options.repo)) {
      return callback(null, marketManifest || manifest);
    } else {
      manifest.icon = (marketManifest != null ? marketManifest.icon : void 0) || '';
      if (options.branch) {
        if (marketManifest != null ? marketManifest.git : void 0) {
          manifest.git = marketManifest.git;
        }
        manifest.branch = options.branch;
      }
      if (options.repo) {
        manifest.git = options.repo;
        repo = options.repo.split('@');
        manifest.git = repo[0];
        if (repo.length === 2 && (options.branch == null)) {
          manifest.branch = repo[1];
        }
        if (manifest.git.slice(-4) !== '.git') {
          manifest.git += '.git';
        }
      }
      return callback(null, manifest);
    }
  });
};

module.exports.install = install = function(app, options, callback) {
  return recoverManifest(app, options, function(err, manifest) {
    var what;
    if (err) {
      return callback(err);
    }
    what = "api/applications/install";
    homeClient.headers['content-type'] = 'application/json';
    return homeClient.post(what, manifest, function(err, res, body) {
      var ref, slug;
      if (err || body.error) {
        if ((err != null ? err.code : void 0) === 'ECONNREFUSED') {
          err = makeError(msgHomeNotStarted(app), null);
        } else if ((body != null ? (ref = body.message) != null ? ref.toLowerCase().indexOf('not found') : void 0 : void 0) !== -1) {
          err = makeError(msgRepoGit(app, manifest), null);
        } else {
          err = makeError(err, body);
        }
        return callback(err);
      } else {
        slug = body.app.slug;
        return waitInstallComplete(slug, options.timeout, function(err, appresult) {
          if (err) {
            return callback(makeError(err, null));
          } else if (appresult.state === 'installed') {
            return callback();
          } else if (appresult.state === 'installing') {
            return callback(makeError(msgLongInstall(app), null));
          } else {
            return callback(makeError(msgInstallFailed(app), null));
          }
        });
      }
    });
  });
};

uninstall = module.exports.uninstall = function(app, callback) {
  var what;
  what = "api/applications/" + app + "/uninstall";
  return homeClient.del(what, function(err, res, body) {
    if (err || body.error) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

start = module.exports.start = function(app, callback) {
  var find_app;
  find_app = false;
  return homeClient.get("api/applications/", function(err, res, apps) {
    var i, len, manifest, msg, ref, what;
    if ((apps != null) && (apps.rows != null)) {
      ref = apps.rows;
      for (i = 0, len = ref.length; i < len; i++) {
        manifest = ref[i];
        if (!(manifest.name === app)) {
          continue;
        }
        find_app = true;
        what = "api/applications/" + manifest.slug + "/start";
        homeClient.post(what, manifest, function(err, res, body) {
          if (err || body.error) {
            return callback(makeError(err, body));
          } else {
            return callback();
          }
        });
      }
      if (!find_app) {
        msg = "application " + app + " not found.";
        return callback(makeError(msg));
      }
    } else {
      msg = "no applications installed.";
      return callback(makeError(msg));
    }
  });
};

stop = module.exports.stop = function(app, callback) {
  var find_app;
  find_app = false;
  return homeClient.get("api/applications/", function(err, res, apps) {
    var i, len, manifest, ref, what;
    if ((apps != null ? apps.rows : void 0) != null) {
      ref = apps.rows;
      for (i = 0, len = ref.length; i < len; i++) {
        manifest = ref[i];
        if (!(manifest.name === app)) {
          continue;
        }
        find_app = true;
        what = "api/applications/" + app + "/stop";
        homeClient.post(what, {}, function(err, res, body) {
          if ((err != null) || (body.error != null)) {
            return callback(makeError(err, body));
          } else {
            return callback();
          }
        });
      }
      if (!find_app) {
        err = "application " + app + " not found";
        return callback(makeError(err, null));
      }
    } else {
      err = "application " + app + " not found";
      return callback(makeError(err, null));
    }
  });
};

module.exports.update = function(app, callback) {
  var find_app;
  find_app = false;
  return homeClient.get("api/applications/", function(err, res, apps) {
    var i, len, manifest, ref, what;
    if ((apps != null) && (apps.rows != null)) {
      ref = apps.rows;
      for (i = 0, len = ref.length; i < len; i++) {
        manifest = ref[i];
        if (manifest.name === app) {
          find_app = true;
          what = "api/applications/" + manifest.slug + "/update";
          homeClient.put(what, manifest, function(err, res, body) {
            var NotificationsHelper, notificationSlug, notifier;
            if (err || body.error) {
              return callback(makeError(err, body));
            } else {
              process.env.NAME = "home";
              process.env.TOKEN = helpers.getToken();
              process.env.NODE_ENV = "production";
              NotificationsHelper = require('cozy-notifications-helper');
              notifier = new NotificationsHelper('home');
              notificationSlug = "home_update_notification_app_" + app;
              return notifier.destroy(notificationSlug, function(err) {
                if (err != null) {
                  log.error(err);
                }
                return callback();
              });
            }
          });
        }
      }
      if (!find_app) {
        err = "Update failed: application " + app + " not found.";
        return callback(makeError(err, null));
      }
    } else {
      err = "Update failed: no application installed";
      return callback(makeError(err, null));
    }
  });
};

module.exports.changeBranch = function(app, branch, callback) {
  var find_app;
  find_app = false;
  return homeClient.get("api/applications/", function(err, res, apps) {
    var i, len, manifest, ref, what;
    if ((apps != null) && (apps.rows != null)) {
      ref = apps.rows;
      for (i = 0, len = ref.length; i < len; i++) {
        manifest = ref[i];
        if (manifest.name === app) {
          find_app = true;
          what = "api/applications/" + manifest.slug + "/branch/" + branch;
          homeClient.put(what, manifest, function(err, res, body) {
            if (err || body.error) {
              return callback(makeError(err, body));
            } else {
              return callback();
            }
          });
        }
      }
      if (!find_app) {
        err = "Update failed: application " + app + " not found.";
        return callback(makeError(err, null));
      }
    }
  });
};

module.exports.restart = function(app, callback) {
  log.info("stop " + app);
  return stop(app, function(err) {
    if (err) {
      return callback(err);
    } else {
      log.info("start " + app);
      return start(app, callback);
    }
  });
};

module.exports.restop = function(app, callback) {
  log.info("start " + app);
  return start(app, function(err) {
    if (err) {
      return callback(err);
    } else {
      log.info("stop " + app);
      return stop(app, callback);
    }
  });
};

module.exports.reinstall = function(app, options, callback) {
  log.info("    * uninstall " + app);
  options.repo = options.git;
  return uninstall(app, function(err) {
    if (err) {
      log.error('     -> KO');
      return callback(err);
    } else {
      log.info('     -> OK');
      log.info("    * install " + app);
      return install(app, options, function(err) {
        if (err) {
          log.error('     -> KO');
        } else {
          log.info('     -> OK');
        }
        return callback(err);
      });
    }
  });
};

module.exports.installFromDisk = function(app, callback) {
  var options;
  options = {
    'headers': {
      'content-type': 'application/json'
    }
  };
  return helpers.retrieveManifestFromDisk(app, function(err, manifest) {
    var appli, clientCouch, id, pwd, ref;
    appli = {
      docType: "application",
      displayName: manifest.displayName || manifest.name.replace('cozy-', ''),
      name: manifest.name.replace('cozy-', ''),
      slug: manifest.name.replace('cozy-', ''),
      version: manifest.version,
      isStoppable: false,
      "package": manifest["package"],
      git: manifest.git,
      branch: manifest.branch,
      state: 'installed',
      iconPath: "img/apps/" + app + ".svg",
      iconType: 'svg',
      port: null
    };
    clientCouch = helpers.clients.couch;
    ref = helpers.getAuthCouchdb(false), id = ref[0], pwd = ref[1];
    if (id !== '') {
      clientCouch.setBasicAuth(id, pwd);
    }
    return clientCouch.post(helpers.dbName, appli, options, function(err, res, app) {
      var access;
      if (err != null) {
        return callback(err);
      }
      if (app.error != null) {
        return callback(app.error);
      }
      access = {
        docType: 'Access',
        login: appli.name,
        token: randomString(),
        permissions: manifest['cozy-permissions'],
        app: app.id
      };
      return clientCouch.post(helpers.dbName, access, options, function(err, res, body) {
        var homePath, iconPath, urlPath;
        if (err != null) {
          return callback(err);
        }
        if (app.error != null) {
          return callback(app.error);
        }
        homePath = '/usr/local/cozy/apps/home/client/app/assets';
        iconPath = path.join(homePath, appli.iconPath);
        urlPath = helpers.dbName + "/" + app.id + "/icon.svg?rev=" + app.rev;
        return clientCouch.putFile(urlPath, iconPath, function(err, res, body) {
          return callback();
        });
      });
    });
  });
};

module.exports.installController = function(app, callback) {
  log.info("    * install " + app.slug);
  return client.stop(app.slug, function(err, res, body) {
    var manifest, token;
    manifest = manifestBase();
    manifest.name = app.slug;
    manifest.user = app.slug;
    manifest.repository.url = app.git;
    manifest["package"] = app["package"];
    manifest.type = app.type;
    if (token = getToken()) {
      dsClient.setBasicAuth('home', token);
    }
    return dsClient.post('request/access/byApp/', {
      key: app.id
    }, function(err, res, body) {
      manifest.password = body[0].value.token;
      if (app.branch != null) {
        manifest.repository.branch = app.branch;
      }
      return client.start(manifest, function(err, res, body) {
        if (err || body.error) {
          log.error('     -> KO');
          return callback(makeError(err, body));
        } else {
          log.info('     -> OK');
          if (body.drone.port !== app.port && app.state === 'installed') {
            app.port = body.drone.port;
            log.info("    * update port");
            return dsClient.put("data/" + app.id + "/", app, function(err, res, body) {
              if (err || (body != null ? body.error : void 0)) {
                log.error('     -> KO');
                return callback(makeError(err, body));
              } else {
                log.info('     -> OK');
                return callback();
              }
            });
          } else {
            return callback();
          }
        }
      });
    });
  });
};

module.exports.stopController = function(app, callback) {
  log.info("    * stop " + app);
  return client.stop(app, function(err, res, body) {
    if (err) {
      log.error('     -> KO');
      return callback(makeError(err, body));
    } else {
      log.info('     -> OK');
      return callback();
    }
  });
};

module.exports.getVersion = function(app, callback) {
  return callback(app.version);
};

module.exports.check = function(options, app, url) {
  return function(callback) {
    var statusClient;
    colors.enabled = (options.raw == null) && (options.json == null);
    statusClient = request.newClient(url);
    return statusClient.get("", function(err, res) {
      var ref;
      if ((ref = res != null ? res.statusCode : void 0) === 200 || ref === 403) {
        if (!options.json) {
          log.raw((app + ": ") + "up".green);
        }
        return typeof callback === "function" ? callback(null, [app, 'up']) : void 0;
      } else {
        if (!options.json) {
          log.raw((app + ": ") + "down".red);
        }
        return typeof callback === "function" ? callback(null, [app, 'down']) : void 0;
      }
    });
  };
};

randomString = function(length) {
  var string;
  if (length == null) {
    length = 32;
  }
  string = "";
  while (string.length < length) {
    string += Math.random().toString(36).substr(2);
  }
  return string.substr(0, length);
};

removeApp = function(apps, name, callback) {
  var app;
  if (apps.length > 0) {
    app = apps.pop().value;
    if (app.name === name) {
      return dsClient.del("access/" + app._id + "/", function(err, response, body) {
        return dsClient.del("data/" + app._id + "/", function(err, response, body) {
          return removeApp(apps, name, callback);
        });
      });
    } else {
      return removeApp(apps, name, callback);
    }
  } else {
    return callback();
  }
};

recoverStandaloneManifest = function(port, cb) {
  var access, err, error1, manifest, packagePath, ref;
  if (!fs.existsSync('package.json')) {
    return log.error("Cannot read package.json. " + "This function should be called in root application folder.");
  } else {
    try {
      packagePath = path.relative(__dirname, 'package.json');
      manifest = require(packagePath);
    } catch (error1) {
      err = error1;
      log.raw(err);
      log.error("Package.json isn't correctly formatted.");
      return;
    }
    manifest.name = manifest.name + "test";
    manifest.displayName = manifest['cozy-displayName'] || manifest.name;
    manifest.state = "installed";
    manifest.docType = "Application";
    manifest.port = port;
    manifest.slug = manifest.name.replace('cozy-', '');
    access = {
      permissions: manifest['cozy-permissions'],
      password: randomString(),
      slug: manifest.slug
    };
    if ((ref = manifest.slug) === 'hometest' || ref === 'proxytest' || ref === 'data-systemtest') {
      log.error('Sorry, cannot start stack application without ' + ' controller.');
      return cb();
    } else {
      return cb(manifest, access);
    }
  }
};

putInDatabase = function(manifest, access, cb) {
  var requestPath, token;
  log.info("Add/replace application in database...");
  token = getToken();
  if (token != null) {
    dsClient.setBasicAuth('home', token);
    requestPath = "request/application/all/";
    return dsClient.post(requestPath, {}, function(err, response, apps) {
      if (err != null) {
        log.error("Data-system looks down (not responding).");
      }
      if (err != null) {
        return cb();
      }
      return removeApp(apps, manifest.name, function() {
        return dsClient.post("data/", manifest, function(err, res, body) {
          var id;
          id = body._id;
          if (err) {
            log.error("Cannot add application in database.");
            return cb(makeError(err, body));
          } else {
            access.app = id;
            return dsClient.post("access/", access, function(err, res, body) {
              var msg;
              if (err) {
                msg = "Cannot add application in database.";
                log.error(msg);
                return cb(makeError(err, body));
              } else {
                return cb();
              }
            });
          }
        });
      });
    });
  }
};

module.exports.startStandalone = function(port, callback) {
  var appmanifest;
  appmanifest = null;
  process.on('SIGINT', function() {
    return stopStandalone(function(err) {
      if (err == null) {
        return console.log("Application removed");
      }
    }, appmanifest);
  });
  process.on('uncaughtException', function(err) {
    log.error('uncaughtException');
    return log.raw(err);
  });
  log.info("Retrieve application manifest...");
  return recoverStandaloneManifest(port, function(manifest, access) {
    appmanifest = manifest;
    return putInDatabase(appmanifest, access, function(err) {
      if (err != null) {
        return callback(err);
      }
      log.info("Reset proxy...");
      return proxyClient.get("routes/reset", function(err, res, body) {
        var server;
        if (err) {
          log.error("Cannot reset routes.");
          return callback(makeError(err, body));
        } else {
          log.info("Start application...");
          process.env.TOKEN = access.password;
          process.env.NAME = access.slug;
          process.env.NODE_ENV = "production";
          process.env.PORT = port;
          server = spawn("npm", ["start"]);
          server.stdout.setEncoding('utf8');
          server.stdout.on('data', function(data) {
            return log.raw(data);
          });
          server.stderr.setEncoding('utf8');
          server.stderr.on('data', function(data) {
            return log.raw(data);
          });
          server.on('error', function(err) {
            return log.raw(err);
          });
          return server.on('close', function(code) {
            return log.info("Process exited with code " + code);
          });
        }
      });
    });
  });
};

stopStandalone = module.exports.stopStandalone = function(callback, manifest) {
  var err, error, error1, packagePath, ref, requestPath, token;
  if (manifest == null) {
    manifest = null;
  }
  log.info("Retrieve application manifest ...");
  if (!manifest) {
    if (!fs.existsSync('package.json')) {
      error = "Cannot read package.json. " + "This function should be called in root application  folder";
      return callback(makeError(err, null));
    }
    try {
      packagePath = path.relative(__dirname, 'package.json');
      manifest = require(packagePath);
    } catch (error1) {
      err = error1;
      error("Package.json isn't in a correct format");
      return callback(makeError(err, null));
    }
    manifest.name = manifest.name + "test";
    manifest.slug = manifest.name.replace('cozy-', '');
  }
  if ((ref = manifest.slug) === 'hometest' || ref === 'proxytest' || ref === 'data-systemtest') {
    error = 'Sorry, cannot start stack application without controller.';
    return callback(makeError(err, null));
  } else {
    token = getToken();
    if (token == null) {
      return;
    }
    log.info("Remove from database ...");
    dsClient.setBasicAuth('home', token);
    requestPath = "request/application/all/";
    return dsClient.post(requestPath, {}, function(err, response, apps) {
      if (err) {
        return callback(makeError("Data-system doesn't respond", null));
      }
      return removeApp(apps, manifest.name, function() {
        log.info("Reset proxy ...");
        return proxyClient.get("routes/reset", function(err) {
          if (err) {
            log.error("Cannot reset routes.");
            return callback(makeError(err, null));
          } else {
            return callback();
          }
        });
      });
    });
  }
};
