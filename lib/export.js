// Generated by CoffeeScript 1.10.0
var async, configureCouchClient, couchClient, createDir, createFileStream, createMetadata, exportAlbums, exportContacts, exportDirs, exportFiles, exportPhotos, fetchLocale, fs, getAllElements, getContent, getDirs, getFiles, helpers, locale, log, request, tar, vcardParser, zlib;

fs = require('fs');

tar = require('tar-stream');

zlib = require('zlib');

async = require('async');

request = require('request-json-light');

vcardParser = require('cozy-vcard');

log = require('printit')();

helpers = require('./helpers');

couchClient = helpers.clients.couch;

couchClient.headers['content-type'] = 'application/json';

locale = 'en';

configureCouchClient = function() {
  var password, ref1, username;
  ref1 = helpers.getAuthCouchdb(), username = ref1[0], password = ref1[1];
  if (username || password) {
    return couchClient.setBasicAuth(username, password);
  }
};

getFiles = function(couchClient, callback) {
  return couchClient.get('cozy/_design/file/_view/byfolder', function(err, res, body) {
    return callback(err, body);
  });
};

getDirs = function(couchClient, callback) {
  return couchClient.get('cozy/_design/folder/_view/byfolder', function(err, res, body) {
    return callback(err, body);
  });
};

getAllElements = function(couchClient, element, callback) {
  return couchClient.get("cozy/_design/" + element + "/_view/all", function(err, res, body) {
    return callback(err, body);
  });
};

getContent = function(couchClient, binaryId, type, callback) {
  return couchClient.saveFileAsStream("cozy/" + binaryId + "/file", function(err, stream) {
    if (err != null) {
      return callback(err);
    } else if (stream.statusCode === 404) {
      return couchClient.saveFileAsStream("cozy/" + binaryId + "/raw", function(err, raw) {
        if (err != null) {
          return callback(err);
        } else {
          raw.on('error', function(err) {
            return log.error(err);
          });
          return callback(null, raw);
        }
      });
    } else {
      stream.on('error', function(err) {
        return log.error(err);
      });
      return callback(null, stream);
    }
  });
};

createDir = function(pack, name, callback) {
  return pack.entry({
    name: name,
    mode: 0x1e8,
    type: 'directory'
  }, callback);
};

createFileStream = function(pack, name, stream, callback) {
  var chunks;
  chunks = [];
  stream.on('error', function(err) {
    return callback(err);
  });
  stream.on('data', function(chunk) {
    return chunks.push(chunk);
  });
  return stream.on('end', function() {
    var buf, entry;
    buf = Buffer.concat(chunks);
    entry = pack.entry({
      name: name,
      size: Buffer.byteLength(buf, 'binary'),
      mode: 0x1a0,
      mtime: new Date,
      type: 'file'
    }, callback);
    entry.write(buf);
    return entry.end();
  });
};

createMetadata = function(pack, name, data, callback) {
  var entry;
  entry = pack.entry({
    name: name,
    size: Buffer.byteLength(data, 'utf8'),
    mode: 0x1a0,
    mtime: new Date,
    type: 'file'
  }, callback);
  entry.write(data);
  return entry.end();
};

exportDirs = function(pack, next) {
  return getDirs(couchClient, function(err, dirs) {
    if (err != null) {
      return next(err);
    }
    if ((dirs != null ? dirs.rows : void 0) == null) {
      return next(null);
    }
    return async.eachOf(dirs.rows, function(dir, key, cb) {
      return createDir(pack, "files/" + dir.value.path + "/" + dir.value.name, cb);
    }, function(err) {
      if (err) {
        log.info('Error while exporting directories: ', err);
      } else {
        log.info('Directories have been exported successfully');
      }
      return next(err);
    });
  });
};

exportFiles = function(pack, next) {
  return getFiles(couchClient, function(err, files) {
    if (err != null) {
      return next(err);
    }
    if ((files != null ? files.rows : void 0) == null) {
      return next(null);
    }
    return async.eachSeries(files.rows, function(file, cb) {
      var binaryId, ref1, ref2, ref3;
      binaryId = file != null ? (ref1 = file.value) != null ? (ref2 = ref1.binary) != null ? (ref3 = ref2.file) != null ? ref3.id : void 0 : void 0 : void 0 : void 0;
      if (binaryId == null) {
        return cb();
      }
      return getContent(couchClient, binaryId, 'file', function(err, stream) {
        var name;
        if (err != null) {
          return cb(err);
        }
        name = "files/" + file.value.path + "/" + file.value.name;
        return createFileStream(pack, name, stream, cb);
      });
    }, function(err, value) {
      if (err) {
        log.info('Error while exporting files: ', err);
      } else {
        log.info('Files have been exported successfully');
      }
      return next(err);
    });
  });
};

fetchLocale = function(next) {
  return getAllElements(couchClient, 'cozyinstance', function(err, instance) {
    var ref1, ref2;
    locale = (instance != null ? (ref1 = instance.rows) != null ? (ref2 = ref1[0].value) != null ? ref2.locale : void 0 : void 0 : void 0) || 'en';
    return next(null);
  });
};

exportPhotos = function(pack, references, next) {
  return getAllElements(couchClient, 'photo', function(err, photos) {
    var dir, dirname;
    if (err != null) {
      return next(err);
    }
    if ((photos != null ? photos.rows : void 0) == null) {
      return next(null);
    }
    dirname = 'Uploaded from Cozy Photos/';
    if (locale === 'fr') {
      dirname = 'Transférées depuis Cozy Photos/';
    }
    dir = "files/Photos/" + dirname;
    return createDir(pack, dir, function() {
      return async.eachSeries(photos.rows, function(photo, cb) {
        var binaryId, data, info, name, ref1, ref2, ref3;
        info = photo != null ? photo.value : void 0;
        binaryId = (ref1 = (info != null ? (ref2 = info.binary) != null ? ref2.raw : void 0 : void 0) || (info != null ? (ref3 = info.binary) != null ? ref3.file : void 0 : void 0)) != null ? ref1.id : void 0;
        if (binaryId == null) {
          return cb();
        }
        name = info.title || (info._id + ".jpg");
        data = {
          albumid: info.albumid,
          filepath: "Photos/" + dirname + "/" + name
        };
        references.push(JSON.stringify(data));
        return getContent(couchClient, binaryId, 'raw', function(err, stream) {
          if (err != null) {
            return cb(err);
          }
          return createFileStream(pack, dir + "/" + name, stream, cb);
        });
      }, function(err, value) {
        if (err) {
          log.info('Error while exporting photos: ', err);
        } else {
          log.info('Photos have been exported successfully');
        }
        return next(err);
      });
    });
  });
};

exportAlbums = function(pack, references, next) {
  return getAllElements(couchClient, 'album', function(err, albums) {
    var albumsref;
    if (err != null) {
      return next(err);
    }
    if ((albums != null ? albums.rows : void 0) == null) {
      return next(null);
    }
    albumsref = '';
    return async.eachSeries(albums.rows, function(album, cb) {
      var data, id, name, rev;
      if ((album != null ? album.value : void 0) == null) {
        return cb();
      }
      id = album.value._id;
      rev = album.value._rev;
      name = album.value.title;
      data = {
        _id: album.value._id,
        _rev: album.value._rev,
        name: album.value.title,
        type: 'io.cozy.photos.albums'
      };
      albumsref += JSON.stringify(data) + '\n';
      return cb();
    }, function(err, value) {
      if (err != null) {
        log.info('Error while exporting albums', err);
        return next(err);
      }
      return createDir(pack, 'albums', function(err) {
        if (err != null) {
          return next(err);
        }
        return createMetadata(pack, 'albums/albums.json', albumsref, function(err) {
          var ref;
          if (err != null) {
            return next(err);
          }
          ref = references.join('\n');
          return createMetadata(pack, 'albums/references.json', ref, function(err) {
            if (err != null) {
              log.info('Error while exporting albums: ', err);
            } else {
              log.info('Albums have been exported successfully');
            }
            return next(err);
          });
        });
      });
    });
  });
};

exportContacts = function(pack, next) {
  return getAllElements(couchClient, 'contact', function(err, contacts) {
    if (err != null) {
      return next(err);
    }
    if ((contacts != null ? contacts.rows : void 0) == null) {
      return next(null);
    }
    return createDir(pack, 'contacts', function() {
      return async.eachSeries(contacts.rows, function(contact, cb) {
        var filename, n, vcard;
        if ((contact != null ? contact.value : void 0) == null) {
          return cb();
        }
        vcard = vcardParser.toVCF(contact.value);
        n = contact.value.n;
        n = n.replace(/;+|-/g, '_');
        filename = "Contact_" + n + ".vcf";
        return createMetadata(pack, "contacts/" + filename, vcard, cb);
      }, function(err, value) {
        if (err) {
          log.info('Error while exporting contacts: ', err);
        } else {
          log.info('Contacts have been exported successfully');
        }
        return next(err);
      });
    });
  });
};

module.exports.exportDoc = function(filename, callback) {
  var gzip, pack, references, tarball;
  configureCouchClient();
  pack = tar.pack();
  pack.on('error', function(err) {
    return log.error(err);
  });
  gzip = zlib.createGzip({
    level: 6,
    memLevel: 6
  });
  gzip.on('error', function(err) {
    return log.error(err);
  });
  tarball = fs.createWriteStream(filename);
  tarball.on('error', callback);
  tarball.on('close', callback);
  pack.pipe(gzip).pipe(tarball);
  references = [];
  return async.series([
    function(next) {
      return exportDirs(pack, next);
    }, function(next) {
      return exportFiles(pack, next);
    }, function(next) {
      return fetchLocale(next);
    }, function(next) {
      return exportPhotos(pack, references, next);
    }, function(next) {
      return exportAlbums(pack, references, next);
    }, function(next) {
      return exportContacts(pack, next);
    }
  ], function(err) {
    if (err != null) {
      return callback(err);
    } else {
      return pack.finalize();
    }
  });
};
