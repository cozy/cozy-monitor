// Generated by CoffeeScript 1.10.0
var STACK, application, appsPath, async, axon, clients, cozyStack, db, exec, fs, helpers, humanize, log, logError, monitoring, path, pkg, program, request, stackApplication, version,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

program = require('commander');

async = require("async");

fs = require("fs");

axon = require('axon');

exec = require('child_process').exec;

path = require('path');

log = require('printit')();

humanize = require('humanize');

request = require("request-json-light");

pkg = require('../package.json');

version = pkg.version;

appsPath = '/usr/local/cozy/apps';

helpers = require('./helpers');

application = require('./application');

stackApplication = require('./stack_application');

monitoring = require('./monitoring');

db = require('./database');

logError = helpers.logError;

clients = helpers.clients;

STACK = ['data-system', 'home', 'proxy'];

program.version(version).usage('<action> <app>');

program.command("install <name> ").description("Install application").option('-r, --repo <repo>', 'Use specific repo').option('-b, --branch <branch>', 'Use specific branch').option('-d, --displayName <displayName>', 'Display specific name').option('-t , --timeout <timeout>', 'Configure timeout (in millisecond)' + ', -t false to remove timeout)').action(function(name, options) {
  var err, installation;
  if (name.indexOf('https://') !== -1) {
    return log.info('Use option -r to specify application repository');
  }
  log.info("Install started for " + name + "...");
  if (name === 'controller') {
    err = new Error("Controller should be installed with command " + "'npm -g install cozy-controller'");
    logError(err, 'Install failed for controller');
  }
  if (indexOf.call(STACK, name) >= 0) {
    installation = stackApplication.install;
  } else {
    installation = application.install;
  }
  return installation(name, options, function(err) {
    if (err != null) {
      return logError(err, "Install failed for " + name + ".");
    } else {
      return log.info(name + " was successfully installed.");
    }
  });
});

program.command("install-cozy-stack").description("Install cozy via the Cozy Controller").action(function() {
  return async.eachSeries(STACK, function(app, cb) {
    log.info("Install started for " + app + "...");
    return stackApplication.install(app, {}, function(err) {
      if (err != null) {
        logError(err, "Install failed for " + app + ".");
        return cb(err);
      } else {
        log.info('...ok');
        return cb();
      }
    });
  }, function(err) {
    if (err != null) {
      return logError(err, "Install failed for cozy stack.");
    } else {
      return log.info('Cozy stack successfully installed.');
    }
  });
});

program.command("uninstall <app>").description("Remove application").action(function(app) {
  var uninstallation;
  log.info("Uninstall started for " + app + "...");
  if (indexOf.call(STACK, app) >= 0) {
    uninstallation = stackApplication.uninstall;
  } else {
    uninstallation = application.uninstall;
  }
  return uninstallation(app, function(err) {
    if (err != null) {
      return logError(err, "Uninstall failed for " + app + ".");
    } else {
      return log.info(app + " successfully uninstalled.");
    }
  });
});

program.command("start <app>").description("Start application").action(function(app) {
  var start;
  log.info("Starting " + app + "...");
  if (indexOf.call(STACK, app) >= 0) {
    start = stackApplication.start;
  } else {
    start = application.start;
  }
  return start(app, function(err) {
    if (err != null) {
      return logError(err, "Start failed for " + app + ".");
    } else {
      return log.info(app + " successfully started.");
    }
  });
});

program.command("restart <app>").description("Start application").action(function(app) {
  var start;
  log.info("Restart " + app + "...");
  if (indexOf.call(STACK, app) >= 0) {
    start = stackApplication.start;
  } else {
    start = application.start;
  }
  return start(app, function(err) {
    if (err != null) {
      return logError(err, "Restart failed for " + app + ".");
    } else {
      return log.info(app + " successfully restarted.");
    }
  });
});

program.command("restart-cozy-stack").description("Restart cozy through controller").action(function() {
  return async.eachSeries(STACK, function(app, cb) {
    log.info("Restart " + app + "...");
    return stackApplication.start(app, function(err) {
      if (err != null) {
        logError(err, "Restart failed for " + app + ".");
        return cb(err);
      } else {
        log.info('...ok');
        return cb();
      }
    });
  }, function(err) {
    if (err != null) {
      return logError(err, "restart failed for cozy stack.");
    } else {
      return log.info('Cozy stack successfully restarted.');
    }
  });
});

program.command("stop <app>").description("Stop application").action(function(app) {
  var stop;
  log.info("Stopping " + app + "...");
  if (indexOf.call(STACK, app) >= 0) {
    stop = stackApplication.stop;
  } else {
    stop = application.stop;
  }
  return stop(app, function(err) {
    if (err != null) {
      return logError(err, "Stop failed for " + app + ".");
    } else {
      return log.info(app + " successfully stoped.");
    }
  });
});

program.command("stop-all").description("Stop all user applications").action(function() {
  return application.getApps(function(err, apps) {
    if (err != null) {
      return logError(err, "Retrieve applications failed.");
    } else {
      return async.eachSeries(apps, function(app, cb) {
        log.info("Stopping " + app.slug + " ...");
        return application.stop(app.slug, function(err) {
          if (err != null) {
            logError(err, "Stop failed for " + app.slug + ".");
            return cb(err);
          } else {
            log.info("...ok");
            return cb();
          }
        });
      }, function(err) {
        if (err != null) {
          return logError(err, "Stop failed.");
        } else {
          return log.info("All applications successfully stopped.");
        }
      });
    }
  });
});

program.command("update <app>").description("Update application (git + npm) and restart it.").action(function(app) {
  var err, update;
  log.info("Updating " + app + "...");
  if (app === 'controller') {
    err = new Error("Controller should be updated with command " + "'npm -g update cozy-controller'");
    logError(err, 'Update failed for controller');
  }
  if (indexOf.call(STACK, app) >= 0) {
    update = stackApplication.update;
  } else {
    update = application.update;
  }
  return update(app, function(err) {
    if (err != null) {
      return logError(err, "Update failed for " + app + ".");
    } else {
      return log.info(app + " successfully updated.");
    }
  });
});

program.command("update-cozy-stack").description("Update cozy stack (home/proxy/data-system)").action(function() {
  return async.eachSeries(['data-system', 'home', 'proxy'], function(app, cb) {
    log.info("Update " + app + "...");
    return stackApplication.update(app, function(err) {
      if (err != null) {
        logError(err, "Update failed for " + app + ".");
        return cb(err);
      } else {
        log.info('...ok');
        return cb();
      }
    });
  }, function(err) {
    if (err != null) {
      return logError(err, "Update failed for cozy stack.");
    } else {
      return log.info('Cozy stack successfully updated.');
    }
  });
});

program.command("update-all").description("Update all user applications").action(function() {
  return application.getApps(function(err, apps) {
    if (err != null) {
      return logError(err, "Retrieve applications failed.");
    } else {
      return async.mapSeries(apps, function(app, cb) {
        log.info("Update " + app.name + " ...");
        return application.update(app.name, function(err) {
          if (err != null) {
            log.error(err);
            log.error("Update failed for " + app.slug + ".");
            return cb(null, app.name);
          } else {
            log.info("...ok");
            return cb(null, null);
          }
        });
      }, function(err, res) {
        res = res.filter(function(name) {
          return name != null;
        });
        if (res.length > 0) {
          return logError(err, "Update failed for " + (res.join(', ')));
        } else {
          return log.info("All applications successfully updated.");
        }
      });
    }
  });
});

program.command("update-all-cozy-stack").description("Update all cozy stack application (DS + proxy + home + controller)").action(function() {
  log.info("Update all cozy stack ...");
  return stackApplication.updateAll(function(err) {
    if (err != null) {
      return logError(err, "Update all cozy stack failed.");
    } else {
      return log.info("All cozy stack successfully updated.");
    }
  });
});

program.command("change-branch <app> <branch>").description("Change application branch").action(function(app, branch) {
  var changeBranch;
  log.info("Change " + app + " for branch " + branch + "...");
  if (app === 'data-system' || app === 'home' || app === 'proxy') {
    changeBranch = stackApplication.changeBranch;
  } else {
    changeBranch = application.changeBranch;
  }
  return changeBranch(app, branch, function(err) {
    if (err != null) {
      return logError(err, "Start failed for " + app + ".");
    } else {
      return log.info(app + " successfully started.");
    }
  });
});

program.command("init-db [path]").description("Install application").action(function(path) {
  var clientCouch;
  clientCouch = helpers.clients.couch;
  return clientCouch.get(helpers.dbName + "/_design/application/_view/all", {}, function(err, res, body) {
    var apps;
    if ((err == null) && body.total_rows !== 0) {
      log.error("Your database isn't empty");
    }
    path = path || '/usr/local/cozy/apps';
    apps = fs.readdirSync(path);
    return async.eachSeries(apps, function(app, cb) {
      if (app === 'stack.json') {
        return cb();
      } else if (indexOf.call(STACK, app) >= 0) {
        return cb();
      } else {
        return application.installFromDisk(app, cb);
      }
    }, function(err) {
      if (err != null) {
        log.error(err);
        return log.error('Error in database initialization');
      } else {
        return log.info('Database successfully initialized');
      }
    });
  });
});

program.command('reinstall-missing-app').description('Reinstall all user applications, usefull for cozy relocation').option('-s, --error-safe', 'Command won\'t stop if an error occurs').action(function(options) {
  return application.getApps(function(err, apps) {
    var errors, reinstallApplication;
    if (err != null) {
      return logError(err, "Retrieve applications failed.");
    } else {
      errors = [];
      reinstallApplication = function(first_try, app, next) {
        var callback, displayError;
        if (options['errorSafe']) {
          callback = function(err) {
            if (err != null) {
              errors.push({
                subject: app,
                error: err
              });
            }
            process.removeListener('uncaughtException', displayError);
            if (first_try && (err != null)) {
              log.info('npm cache clean');
              return exec('npm cache clean', function(err, stdout, stderr) {
                if (err != null) {
                  log.error(err);
                }
                return reinstallApplication(false, app, next);
              });
            } else {
              if (next != null) {
                next();
              }
              return next = null;
            }
          };
          displayError = function(err) {
            log.error(err);
            process.removeListener('uncaughtException', displayError);
            if (next != null) {
              next();
            }
            return next = null;
          };
          process.on('uncaughtException', displayError);
        } else {
          callback = function(err) {
            if (first_try && (err != null)) {
              return exec('npm cache clean', function(err, stdout, stderr) {
                if (err != null) {
                  log.error(err);
                }
                return reinstallApplication(false, app, next);
              });
            } else {
              if (next != null) {
                next(err);
              }
              return next = null;
            }
          };
        }
        switch (app.state) {
          case 'installed':
            log.info((app.slug + " : installed. Reinstall ") + "application if necessary...");
            return application.reinstall(app.slug, app, callback);
          case 'stopped':
            log.info((app.slug + " : stopped. Reinstall ") + "application if necessary and stop it...");
            return application.reinstall(app.slug, app, function(err) {
              if (err != null) {
                return callback(err);
              } else {
                log.info("    * stop " + app.slug);
                return application.stop(app.slug, function(err) {
                  if (err != null) {
                    log.info('     -> KO');
                  } else {
                    log.info('     -> OK');
                  }
                  return callback(err);
                });
              }
            });
          case 'installing':
            log.info((app.slug + " : installing. ") + "Reinstall application...");
            return application.reinstall(app.slug, app, callback);
          case 'broken':
            log.info((app.slug + " : broken. Try to reinstall ") + "application...");
            return application.reinstall(app.slug, app, callback);
          default:
            return callback();
        }
      };
      return async.forEachSeries(apps, function(app, next) {
        return reinstallApplication(true, app, next);
      }, function(err) {
        var i, len;
        if (options['errorSafe'] && errors.length > 0) {
          for (i = 0, len = errors.length; i < len; i++) {
            err = errors[i];
            logError(err, "An application has not been " + "reinstalled.", false);
          }
          if (errors.length === apps.length) {
            return process.exit(1);
          } else {
            return process.exit(0);
          }
        } else if (err != null) {
          logError(err, "Reinstall missing app failed.");
          return process.exit(1);
        } else {
          log.info("All missing applications successfully " + "reinstall.");
          return process.exit(0);
        }
      });
    }
  });
});

program.command("start-standalone <port>").description("Start application without controller").action(function(port) {
  return application.startStandalone(port, function(err) {
    if (err != null) {
      return logError(err, "Start standalone failed.");
    }
  });
});

program.command("stop-standalone").description("Stop application without controller").action(function() {
  return application.stopStandalone(function(err) {
    if (err != null) {
      return logError(err, "Stop standalone failed.");
    }
  });
});

cozyStack = ['controller', 'data-system', 'home', 'proxy'];

program.command("versions-stack").description("Display stack applications versions").action(function() {
  log.raw('');
  log.raw('Cozy Stack:'.bold);
  return async.forEachSeries(cozyStack, function(app, cb) {
    return stackApplication.getVersion(app, function(version) {
      log.raw(app + ": " + version);
      return cb();
    });
  }, function(err) {
    return log.raw("monitor: " + version);
  });
});

program.command("versions").description("Display applications versions").option('--json', 'Display result in JSON').action(function(options) {
  var res;
  if (options.json != null) {
    res = {};
  } else {
    log.raw('');
    log.raw('Cozy Stack:'.bold);
  }
  return stackApplication.getVersions(function(err, versions) {
    if (err != null) {
      log.error("Error when retrieving stack applications.");
    } else {
      versions.forEach(function(app) {
        var avail;
        if (app.needsUpdate) {
          avail = " (update available: " + app.lastVersion + ")";
        } else {
          avail = "";
        }
        if (options.json != null) {
          return res[app.name] = app.version;
        } else {
          return log.raw(app.name + ": " + app.version + " " + avail);
        }
      });
    }
    if (options.json != null) {
      res.monitor = version;
    } else {
      log.raw("monitor: " + version);
      log.raw('');
      log.raw("Other applications: ".bold);
    }
    return application.getApps(function(err, apps) {
      if (err != null) {
        return log.error("Error when retrieving user application.");
      } else {
        return async.forEachSeries(apps, function(app, cb) {
          return application.getVersion(app, function(version) {
            var avail;
            if (app.needsUpdate) {
              avail = " (update available: " + app.lastVersion + ")";
            } else {
              avail = "";
            }
            if (options.json != null) {
              res[app.name] = version;
            } else {
              log.raw(app.name + ": " + version + " " + avail);
            }
            return cb();
          });
        }, function(err) {
          if (options.json) {
            return log.raw(JSON.stringify(res, null, 2));
          }
        });
      }
    });
  });
});

program.command("dev-route:start <slug> <port>").description("Create a route so we can access it by the proxy. ").action(function(slug, port) {
  return monitoring.startDevRoute(slug, port, function(err) {
    if (err != null) {
      return logError(err, 'Start route failed');
    } else {
      return log.info("Route was successfully created.");
    }
  });
});

program.command("dev-route:stop <slug>").action(function(slug) {
  return monitoring.stopDevRoute(slug, function(err) {
    if (err != null) {
      return logError(err, 'Stop route failed');
    } else {
      return log.info("Route was successfully removed.");
    }
  });
});

program.command("routes").description("Display routes currently configured inside proxy.").action(function() {
  log.info("Display proxy routes...");
  return monitoring.getRoutes(function(err) {
    if (err != null) {
      return logError(err, 'Display routes failed');
    }
  });
});

program.command("module-status <module>").description("Give status of given in an easy to parse way.").option('--json', 'Display result in JSON').action(function(module, options) {
  return monitoring.moduleStatus(module, function(status) {
    var res;
    if (options.json) {
      res = {};
      res[module] = status;
      return console.log(JSON.stringify(res, null, 2));
    } else {
      return log.info(status);
    }
  });
});

program.command("status").description("Give current state of cozy platform applications").option('--json', 'Display result in JSON').option('-r, --raw', "Don't display color").action(function(options) {
  var opt;
  opt = {
    raw: options.raw,
    json: options.json
  };
  return monitoring.status(opt, function(err, res) {
    if (err != null) {
      return logError(err, "Cannot display status");
    } else {
      if (options.json) {
        return log.raw(JSON.stringify(res, null, 2));
      }
    }
  });
});

program.command("log <app> <type>").description("Display application log with cat or tail -f").action(function(app, type, environment) {
  return monitoring.log(app, type, function(err) {
    if (err != null) {
      return logError(err, "Cannot display log");
    }
  });
});

program.command("curlcouch <url> [method]").description("Send request curl -X <method>\nhttp://id:pwd@couchhost:couchport/cozy/<url> to couchdb ").option('--pretty', "Pretty print result").action(function(url, method, options) {
  var child, pwd, ref, requestOptions, user;
  if (!method) {
    method = 'GET';
  }
  ref = helpers.getAuthCouchdb(false), user = ref[0], pwd = ref[1];
  request = "curl -X " + method + " ";
  if (user === '' && pwd === '') {
    request += "http://localhost:5984/cozy/" + url;
  } else {
    request += "http://" + user + ":" + pwd + "@localhost:5984/cozy/" + url;
  }
  requestOptions = {
    maxBuffer: 10 * 1024 * 1024
  };
  return child = exec(request, requestOptions, function(err, stdout, stderr) {
    var e, error;
    if (options.pretty != null) {
      try {
        return console.log(JSON.stringify(JSON.parse(stdout), null, 2));
      } catch (error) {
        e = error;
        return console.log(stdout);
      }
    } else {
      return console.log(stdout);
    }
  });
});

program.command("compact [database]").description("Start couchdb compaction").action(function(database) {
  if (database == null) {
    database = "cozy";
  }
  log.info("Start couchdb compaction on " + database + " ...");
  return db.compact(database, function(err) {
    if (err != null) {
      return logError(err, "Cannot compact database");
    } else {
      log.info(database + " compaction succeeded");
      return process.exit(0);
    }
  });
});

program.command("compact-views <view> [database]").description("Start couchdb compaction of the given view").action(function(view, database) {
  if (database == null) {
    database = "cozy";
  }
  log.info("Start views compaction on " + database + " for " + view + " ...");
  return db.compactViews(view, database, function(err) {
    if (err != null) {
      return logError(err, "Cannot compact view");
    } else {
      log.info(view + " compaction succeeded");
      return process.exit(0);
    }
  });
});

program.command("compact-all-views [database]").description("Start couchdb compaction of all views").action(function(database) {
  if (database == null) {
    database = "cozy";
  }
  if (database == null) {
    database = "cozy";
  }
  log.info("Start views compaction on " + database + "...");
  return db.compactAllViews(database, function(err) {
    if (err != null) {
      return logError(err, "Cannot compact views");
    } else {
      log.info("Views compaction succeeded");
      return process.exit(0);
    }
  });
});

program.command("views-list [database]").description("List infos on all views").option('--json', 'Display result in JSON').action(function(database, options) {
  if (database == null) {
    database = "cozy";
  }
  return db.listAllViews(database, function(err, infos) {
    var res;
    if (err != null) {
      return logError(err, "Cannot list views");
    } else {
      infos.sort(function(a, b) {
        if (a.size < b.size) {
          return -1;
        } else {
          return 1;
        }
      });
      if (options.json) {
        res = {};
        infos.map(function(info) {
          res[info.name] = info;
          return res[info.name].human = humanize.filesize(info.size);
        });
        console.log(JSON.stringify(res, null, 2));
      } else {
        infos.map(function(info) {
          var name, size;
          name = info.name + "                    ";
          size = "          " + (humanize.filesize(info.size));
          return console.log((name.substr(0, 20)) + " " + info.hash + " " + (size.substr(-15)));
        });
      }
      return process.exit(0);
    }
  });
});

program.command("cleanup [database]").description("Start couchdb cleanup").action(function(database) {
  if (database == null) {
    database = "cozy";
  }
  log.info("Start couchdb cleanup on " + database + "...");
  return db.cleanup(database, function(err) {
    if (err != null) {
      return logError(err, "Cannot cleanup database");
    } else {
      log.info("Cleanup succeeded");
      return process.exit(0);
    }
  });
});

program.command("backup <target>").description("Start couchdb replication to the target").action(function(target) {
  var data;
  log.info("Backup database ...");
  data = {
    source: "cozy",
    target: target
  };
  return db.backup(data, function(err) {
    if (err != null) {
      return logError(err, "Cannot backup database");
    } else {
      log.info("Backup succeeded");
      return process.exit(0);
    }
  });
});

program.command("reverse-backup <backup> <username> <password>").description("Start couchdb replication from target to cozy. <backup> should be 'https://<ip>:<port>/<database>' ").action(function(backup, usernameBackup, passwordBackup) {
  log.info("Reverse backup...");
  return db.reverseBackup(backup, usernameBackup, passwordBackup, function(err) {
    if (err != null) {
      return logError(err, "Cannot reverse backup");
    } else {
      log.info("Reverse backup succeeded");
      return process.exit(0);
    }
  });
});

program.command("reset-proxy").description("Reset proxy routes list of applications given by home.").action(function() {
  log.info("Reset proxy routes");
  return clients.proxy.get("routes/reset", function(err, res, body) {
    if (err) {
      return logError(helpers.makeError(err, body, "Reset routes failed"));
    } else {
      return log.info("Reset proxy succeeded.");
    }
  });
});

program.command("*").description("Display the help message for an unknown command.").action(function() {
  log.error('Unknown command, showing help instead.');
  return program.outputHelp();
});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
