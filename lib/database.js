// Generated by CoffeeScript 1.10.0
var async, axon, compactViews, configureCouchClient, couchClient, couchUrl, couchdbHost, couchdbPort, exec, fs, getAuthCouchdb, helpers, log, makeError, path, prepareCozyDatabase, program, qs, request, spawn, waitCompactComplete;

require("colors");

program = require('commander');

async = require("async");

fs = require("fs");

qs = require('querystring');

axon = require('axon');

exec = require('child_process').exec;

spawn = require('child_process').spawn;

path = require('path');

log = require('printit')();

helpers = require('./helpers');

couchClient = helpers.clients.couch;

getAuthCouchdb = helpers.getAuthCouchdb;

makeError = helpers.makeError;

couchdbHost = process.env.COUCH_HOST || 'localhost';

couchdbPort = process.env.COUCH_PORT || '5984';

couchUrl = "http://" + couchdbHost + ":" + couchdbPort + "/";

request = require("request-json-light");

configureCouchClient = function(callback) {
  var password, ref, username;
  ref = getAuthCouchdb(), username = ref[0], password = ref[1];
  if (username || password) {
    return couchClient.setBasicAuth(username, password);
  }
};

waitCompactComplete = function(client, found, type, first, callback) {
  var isFirst, types;
  if (callback != null) {
    isFirst = first;
  } else {
    isFirst = true;
    callback = first;
  }
  types = {
    base: "database_compaction",
    view: "view_compaction"
  };
  return setTimeout(function() {
    return client.get('_active_tasks', function(err, res, body) {
      var exist, i, len, task;
      if (err != null) {
        return callback(err);
      } else {
        exist = isFirst;
        for (i = 0, len = body.length; i < len; i++) {
          task = body[i];
          if (task.type === types[type]) {
            exist = true;
          }
        }
        if ((!exist) && found) {
          return callback();
        } else {
          return waitCompactComplete(client, exist, type, false, callback);
        }
      }
    });
  }, 500);
};

prepareCozyDatabase = function(username, password, callback) {
  var createDatabase;
  createDatabase = function(count, cb) {
    if (count < 5) {
      return couchClient.put("cozy", {}, function(err, res, body) {
        if (res.statusCode === 412) {
          return setTimeout(function() {
            return createDatabase(count + 1, cb);
          }, 5 * 1000);
        } else {
          return callback(err);
        }
      });
    } else {
      return callback('Cannot create database');
    }
  };
  if (username || password) {
    couchClient.setBasicAuth(username, password);
  }
  return couchClient.del("cozy", function(err, res, body) {
    return createDatabase(0, function(err) {
      var data;
      data = {
        "admins": {
          "names": [username],
          "roles": []
        },
        "readers": {
          "names": [username],
          "roles": []
        }
      };
      return couchClient.put('cozy/_security', data, function(err, res, body) {
        if (err != null) {
          console.log(err);
          process.exit(1);
        }
        return callback();
      });
    });
  });
};

module.exports.compact = function(database, callback) {
  configureCouchClient();
  couchClient.headers['content-type'] = 'application/json';
  return couchClient.post(database + "/_compact", {}, function(err, res, body) {
    if (err || !body.ok) {
      return callback(makeError(err, body));
    } else {
      return waitCompactComplete(couchClient, false, "base", callback);
    }
  });
};

compactViews = module.exports.compactViews = function(view, database, callback) {
  var password, ref, username;
  ref = getAuthCouchdb(), username = ref[0], password = ref[1];
  if (username || password) {
    couchClient.setBasicAuth(username, password);
  }
  path = database + "/_compact/" + (qs.escape(view));
  couchClient.headers['content-type'] = 'application/json';
  return couchClient.post(path, {}, function(err, res, body) {
    if (err || !body.ok) {
      return callback(makeError(err, body));
    } else {
      return waitCompactComplete(couchClient, false, "view", callback);
    }
  });
};

module.exports.compactAllViews = function(database, callback) {
  configureCouchClient();
  path = (database + "/_all_docs?startkey=\"_design/\"&endkey=") + "\"_design0\"&include_docs=true";
  return couchClient.get(path, function(err, res, body) {
    var designs;
    if (err || !body.rows) {
      return callback(makeError(err, body));
    } else {
      designs = [];
      return async.eachSeries(body.rows, function(design, callback) {
        var designDoc, designId;
        designId = design.id;
        designDoc = designId.substring(8, designId.length);
        return compactViews(designDoc, database, callback);
      }, function(err) {
        return callback(err);
      });
    }
  });
};

module.exports.listAllViews = function(database, callback) {
  configureCouchClient();
  path = (database + "/_all_docs?startkey=\"_design/\"&endkey=") + "\"_design0\"&include_docs=true";
  return couchClient.get(path, function(err, res, body) {
    var designs;
    if (err || !body.rows) {
      return callback(makeError(err, body));
    } else {
      designs = [];
      return async.map(body.rows, function(design, callback) {
        var designDoc, designId;
        designId = design.id;
        designDoc = designId.substring(8, designId.length);
        path = database + "/_design/" + designDoc + "/_info";
        return couchClient.get(path, function(err, res, body) {
          var infos;
          if (err) {
            return callback(err);
          } else {
            infos = {
              name: body.name,
              hash: body.view_index.signature,
              size: body.view_index.disk_size
            };
            return callback(null, infos);
          }
        });
      }, function(err, res) {
        return callback(err, res);
      });
    }
  });
};

module.exports.cleanup = function(database, callback) {
  configureCouchClient();
  return couchClient.post(database + "/_view_cleanup", {}, function(err, res, body) {
    if (err || !body.ok) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

module.exports.backup = function(data, callback) {
  configureCouchClient();
  return couchClient.post("_replicate", data, function(err, res, body) {
    if (err || !body.ok) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

module.exports.reverseBackup = function(backup, usernameBackup, passwordBackup, cb) {
  var password, ref, username;
  ref = getAuthCouchdb(), username = ref[0], password = ref[1];
  return prepareCozyDatabase(username, password, function() {
    var authBackup, authCozy, basicCredentials, credentials, data, toBase64;
    toBase64 = function(str) {
      return new Buffer(str).toString('base64');
    };
    credentials = usernameBackup + ":" + passwordBackup;
    basicCredentials = toBase64(credentials);
    authBackup = "Basic " + basicCredentials;
    credentials = username + ":" + password;
    basicCredentials = toBase64(credentials);
    authCozy = "Basic " + basicCredentials;
    data = {
      'source': {
        'url': backup,
        'headers': {
          'Authorization': authBackup
        }
      },
      'target': {
        'url': couchUrl + "cozy",
        'headers': {
          'Authorization': authCozy
        }
      }
    };
    couchClient.headers['content-type'] = 'application/json';
    return couchClient.post("_replicate", data, function(err, res, body) {
      if (err || !body.ok) {
        return cb(makeError(err, body));
      } else {
        return cb();
      }
    });
  });
};
