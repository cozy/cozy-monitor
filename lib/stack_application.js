// Generated by CoffeeScript 1.10.0
var appsPath, async, client, colors, fs, getVersion, getVersions, helpers, homeClient, log, makeError, makeManifest, msgControllerNotStarted, msgRepoGit, path, waitUpdate;

colors = require("colors");

async = require("async");

fs = require("fs");

path = require('path');

log = require('printit')();

helpers = require('./helpers');

homeClient = helpers.clients.home;

client = helpers.clients.controller;

makeError = helpers.makeError;

appsPath = '/usr/local/cozy/apps';

msgControllerNotStarted = function(app) {
  return "Install failed for " + app + ". The Cozy Controller looks not started.\nInstall operation cannot be performed.";
};

msgRepoGit = function(app, manifest) {
  var ref;
  return "Install failed for " + app + ".\nError not found with manifest\n    npm = " + manifest["package"] + "\n    git = " + ((ref = manifest.repository) != null ? ref.url : void 0) + "\nYou can use option -r to use a specific repo.";
};

makeManifest = function(app, options) {
  var manifest;
  manifest = {
    "domain": "localhost",
    "repository": {
      "type": "git"
    },
    "scripts": {
      "start": "build/server.js"
    }
  };
  manifest.name = app;
  manifest.user = app;
  if ((options != null ? options.repo : void 0) || (options != null ? options.branch : void 0)) {
    manifest.repository.url = options.repo || ("https://github.com/cozy/cozy-" + app + ".git");
    if (manifest.repository.url.slice(-4) !== '.git') {
      manifest.repository.url += '.git';
    }
    if (options.branch != null) {
      manifest.repository.branch = options.branch;
    }
  } else {
    manifest.repository.url = "https://github.com/cozy/cozy-" + app + ".git";
    manifest["package"] = "cozy-" + app;
  }
  return manifest;
};

module.exports.install = function(app, options, callback) {
  var manifest;
  manifest = makeManifest(app, options);
  return client.clean(manifest, function(err, res, body) {
    return client.start(manifest, function(err, res, body) {
      var ref;
      if (err || body.error) {
        if ((err != null ? err.code : void 0) === 'ECONNREFUSED') {
          err = makeError(msgControllerNotStarted(app), null);
        } else if ((body != null ? (ref = body.message) != null ? ref.indexOf('Not Found') : void 0 : void 0) !== -1) {
          err = makeError(msgRepoGit(app, manifest), null);
        } else {
          err = makeError(err, body);
        }
        return callback(err);
      } else {
        return callback();
      }
    });
  });
};

module.exports.uninstall = function(app, callback) {
  var manifest;
  manifest = makeManifest(app);
  return client.clean(manifest, function(err, res, body) {
    if (err || (body.error != null)) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

module.exports.start = function(app, callback) {
  var manifest;
  manifest = makeManifest(app);
  return client.stop(app, function(err, res, body) {
    return client.start(manifest, function(err, res, body) {
      if (err || (body.error != null)) {
        return callback(makeError(err, body));
      } else {
        return callback();
      }
    });
  });
};

module.exports.stop = function(app, callback) {
  return client.stop(app, function(err, res, body) {
    if (err || (body.error != null)) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

module.exports.update = function(app, callback) {
  return helpers.retrieveManifestFromDisk(app, function(err, manifest) {
    manifest.name = app;
    manifest.user = app;
    return client.lightUpdate(manifest, function(err, res, body) {
      if (err || (body.error != null)) {
        return callback(makeError(err, body));
      } else {
        return getVersions(function(err, versions) {
          var NotificationsHelper, needsUpdate, notificationSlug, notifier;
          if (err) {
            return callback();
          } else {
            needsUpdate = versions.some(function(app) {
              return app.needsUpdate;
            });
            if (needsUpdate) {
              return callback();
            } else {
              process.env.NAME = "home";
              process.env.TOKEN = helpers.getToken();
              process.env.NODE_ENV = "production";
              NotificationsHelper = require('cozy-notifications-helper');
              notifier = new NotificationsHelper('home');
              notificationSlug = "home_update_notification_stack";
              return notifier.destroy(notificationSlug, function(err) {
                if (err != null) {
                  log.error(err);
                }
                return callback();
              });
            }
          }
        });
      }
    });
  });
};

module.exports.changeBranch = function(app, branch, callback) {
  return helpers.retrieveManifestFromDisk(app, function(err, manifest) {
    manifest.name = app;
    manifest.user = app;
    return client.changeBranch(manifest, branch, function(err, res, body) {
      if (err || (body.error != null)) {
        return callback(makeError(err, body));
      } else {
        return callback();
      }
    });
  });
};

waitUpdate = function(callback) {
  return homeClient.get('', function(err, res, body) {
    if (res == null) {
      return waitUpdate(callback);
    } else {
      return callback();
    }
  });
};

module.exports.updateAll = function(callback) {
  return client.updateStack({
    "blockMonitor": true
  }, function(err, res, body) {
    if (res == null) {
      return waitUpdate(callback);
    } else if (err || (body.error != null)) {
      return callback(makeError(err, body));
    } else {
      return callback();
    }
  });
};

module.exports.getVersion = getVersion = function(name, callback) {
  var data;
  if (name === "controller") {
    path = "/usr/local/lib/node_modules/cozy-controller/package.json";
  } else {
    path = appsPath + "/" + name + "/node_modules/cozy-" + name + "/package.json";
    if (!fs.existsSync(path)) {
      path = appsPath + "/" + name + "/" + name + "/cozy-" + name + "/package.json";
    }
  }
  if (fs.existsSync(path)) {
    data = fs.readFileSync(path, 'utf8');
    data = JSON.parse(data);
    return callback(data.version);
  } else {
    if (name === 'controller') {
      path = "/usr/lib/node_modules/cozy-controller/package.json";
    } else {
      path = appsPath + "/" + name + "/package.json";
    }
    if (fs.existsSync(path)) {
      data = fs.readFileSync(path, 'utf8');
      data = JSON.parse(data);
      return callback(data.version);
    } else {
      return callback("unknown");
    }
  }
};

module.exports.getVersions = getVersions = function(callback) {
  var cozyStack;
  cozyStack = ['controller', 'data-system', 'home', 'proxy'];
  return homeClient.get('/api/applications/stack', function(err, res, body) {
    if (err != null) {
      return callback(makeError(err, null));
    } else {
      res = {};
      body.rows.forEach(function(app) {
        var currVersion, lastVersion, needsUpdate;
        needsUpdate = false;
        if ((app.version != null) && (app.lastVersion != null)) {
          currVersion = app.version.split('.');
          lastVersion = app.lastVersion.split('.');
          if (parseInt(lastVersion[0], 10) > parseInt(currVersion[0], 10)) {
            needsUpdate = true;
          } else if (parseInt(lastVersion[1], 10) > parseInt(currVersion[1], 10)) {
            needsUpdate = true;
          } else if (parseInt(lastVersion[2], 10) > parseInt(currVersion[2], 10)) {
            needsUpdate = true;
          }
        }
        return res[app.name] = {
          name: app.name,
          version: app.version || 'unknown',
          lastVersion: app.lastVersion || 'unknown',
          needsUpdate: needsUpdate
        };
      });
      return async.map(cozyStack, function(app, cb) {
        if (res[app] != null) {
          return cb(null, res[app]);
        } else {
          return getVersion(app, function(version) {
            return cb(null, {
              name: app,
              version: version,
              needsUpdate: false
            });
          });
        }
      }, callback);
    }
  });
};

module.exports.check = function(options, app, path) {
  if (path == null) {
    path = "";
  }
  return function(callback) {
    colors.enabled = !options.raw && !options.json;
    return helpers.clients[app].get(path, function(err, res) {
      var badStatusCode, econnRefused, ref;
      badStatusCode = (res != null) && ((ref = !res.statusCode) === 200 || ref === 403);
      econnRefused = (err != null) && err.code === 'ECONNREFUSED';
      if (badStatusCode || econnRefused) {
        if (!options.json) {
          log.raw((app + ": ") + "down".red);
        }
        return callback(null, [app, 'down']);
      } else {
        if (!options.json) {
          log.raw((app + ": ") + "up".green);
        }
        return callback(null, [app, 'up']);
      }
    }, false);
  };
};
